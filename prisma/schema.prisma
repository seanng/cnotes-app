generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["mongoDb"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                  String    @id @default(dbgenerated()) @map("_id") @db.ObjectId
  email               String    @unique
  password            String
  alias               String    @unique // company name / creator name.
  role                String // enum doesn't work :(
  status              String    @default("unverified") // unverified, verified, suspended
  firstName           String
  lastName            String
  slug                String    @unique // generated with slugify(alias)
  avatarUrl           String?
  about               String?
  bannerUrl           String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  // social links
  websiteUrl          String?
  tiktokUrl           String?
  youtubeUrl          String?
  instagramUrl        String?
  twitterUrl          String?
  facebookUrl         String?
  // creator-specific
  portfolio           Json[] // {url, thumbnailUrl, description, companyName?, companyUrl?, executedAt, deliverable?, platform}
  primaryPlatform     String?
  genre               String?
  listings            Listing[]
  creatorStats        Json? // { platform, viewership, followers, demographic (male, female), lastVerifiedAt, locations[] }
  statsLastVerifiedAt DateTime?
  // brand-speciifc
  offers              Offer[] // brand only. 
  deals               Deal[]
}

model Listing {
  id            String    @id @default(dbgenerated()) @map("_id") @db.ObjectId
  status        String    @default("unverified") // unverified, active (offering + selecting), completed
  iconUrl       String
  name          String
  offers        Offer[]
  deals         Deal[]
  highestOffer  Int?
  offerCount    Int?
  startPrice    Int?
  platform      String?
  deliverable   String?
  description   String
  specs         Json[] // { key, value }
  creator       User      @relation(fields: [creatorId], references: [id])
  creatorId     String    @db.ObjectId
  auctionEndsAt DateTime? // date auction ends
  completedAt   DateTime? // date marked as complete
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Deal {
  id          String    @id @default(dbgenerated()) @map("_id") @db.ObjectId
  status      String    @default("submitting") // submitting, paying, completed
  listing     Listing   @relation(fields: [listingId], references: [id])
  listingId   String    @db.ObjectId
  brand       User      @relation(fields: [brandId], references: [id])
  brandId     String    @db.ObjectId
  price       Int
  message     String
  productUrl  String?
  submittedAt DateTime? // date marked as submitted
  paidAt      DateTime? // date marked as paid
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Offer {
  id        String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
  listing   Listing  @relation(fields: [listingId], references: [id])
  listingId String   @db.ObjectId
  brand     User     @relation(fields: [brandId], references: [id])
  brandId   String   @db.ObjectId
  isCleared Boolean?
  history   Json[] // {price, productUrl, message, offeredAt} Prisma doesnt support embedded docs https://github.com/prisma/prisma/issues/6708
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// model CreatorStats {
//   id         String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
//   creator      User     @relation(fields: [creatorId], references: [id])
//   creatorId    String   @db.ObjectId
//   platform String
// }

// model Project {
//   id         String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
//   creatorId String @db.ObjectId
//   creator User @relation(fields: [creatorId], references: [id])
// }
