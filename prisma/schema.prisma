generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["mongoDb"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                  String    @id @default(dbgenerated()) @map("_id") @db.ObjectId
  email               String    @unique
  password            String
  alias               String    @unique // company name / creator name.
  role                String // enum doesn't work :(
  status              String    @default("UNVERIFIED") // unverified, verified, suspended
  firstName           String
  lastName            String
  slug                String    @unique // generated with slugify(alias)
  avatarUrl           String?
  about               String?
  bannerUrl           String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  // social links
  websiteUrl          String?
  tiktokUrl           String?
  youtubeUrl          String?
  instagramUrl        String?
  twitterUrl          String?
  facebookUrl         String?
  // creator-specific
  portfolio           Json[] // {url, thumbnailUrl, description, companyName?, companyUrl?, executedAt, deliverable?, platform}
  primaryPlatform     String?
  genre               String?
  offersCreated       Offer[]   @relation("CreatedOffer")
  creatorStats        Json[] // { platform, viewership, followers, demographic (male, female), lastVerifiedAt, locations[] }
  statsLastVerifiedAt DateTime?
  // brand-speciifc
  bids                Bid[] // brand only. 
  companyName         String?
  offersWon           Offer[]   @relation("WonOffer")
}

model Offer {
  id               String    @id @default(dbgenerated()) @map("_id") @db.ObjectId
  status           String    @default("UNVERIFIED") // UNVERIFIED, ACTIVE (bidding + selecting), TRANSACTING, PAYING, COMPLETED 
  bids             Bid[]
  highestBid       Int?
  bidCount         Int?
  startPrice       Int?
  finalPrice       Int? // the same as offer.brand.bids.history[history.length-1].price. updated on winner select.
  platform         String?
  deliverable      String?
  description      String
  deliveryStartsAt DateTime?
  deliveryEndsAt   DateTime?
  specs            Json[] // { key, value }
  creator          User      @relation("CreatedOffer", fields: [creatorId], references: [id])
  creatorId        String    @db.ObjectId
  brand            User?     @relation("WonOffer", fields: [brandId], references: [id])
  brandId          String?   @db.ObjectId
  auctionEndsAt    DateTime? // date auction ends
  selectedAt       DateTime? // date creator selected winner
  transactedAt     DateTime? // date creator submitted 
  paidAt           DateTime? // date marked as paid
  completedAt      DateTime? // date marked as complete
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model Bid {
  id         String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
  offer      Offer    @relation(fields: [offerId], references: [id])
  offerId    String   @db.ObjectId
  brand      User     @relation(fields: [brandId], references: [id])
  brandId    String   @db.ObjectId
  productUrl String
  message    String
  isCleared  Boolean?
  history    Json[] // {price, bidAt} Prisma doesnt support embedded docs https://github.com/prisma/prisma/issues/6708
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// model CreatorStats {
//   id         String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
//   creator      User     @relation(fields: [creatorId], references: [id])
//   creatorId    String   @db.ObjectId
//   platform String
// }

// model Project {
//   id         String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
//   creatorId String @db.ObjectId
//   creator User @relation(fields: [creatorId], references: [id])
// }
